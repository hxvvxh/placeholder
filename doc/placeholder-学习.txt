PropertySource

(1)PropertySource 类 设计用来存放<key,value>对象的抽象类。同时name,source都是final在初始化后不在变化
getProperty 是个抽象方法，需要在子类来实现。

(2)named() 创建一个ComparisonPropertySource 对象。(propertySource的内部类)
ComparisonPropertySource出了构造方法外，其他方法都抛异常。一般用来创建一个具名 PropertySource
   官方解释为：
   ComparisonPropertySource instances are for use with collection comparison only
   ComparisonPropertySource实例仅用于集合比较
   
   大概的意思是：当一个集合存在propertySource时。如何其判断是否存在有name的propertySource呢？
   new 一个ComparisonPropertySource(name)-实质上是PropertySource p=PropertySource.named("sourceA") 然后在collection.contains(p)   
   看了propertySource的equals方法 就可以看出，如何this!=other 时，使用 other  instanceof propertySource && name==other.name 来进行判断

(3)StubPropertySource(propertySource的内部类) getProperty() 方法返回null值   
   官方解释为：
   在实际的情况下用作占位符属性源不能在应用程序上下文中急切地初始化创建时间
   使用存根来保存属性源的默认位置/顺序，然后被替换。在上下文刷新
   
   这个类的主要作用是对外部来说做propertySource的初始化动作，在初始化操作之后，外部做完对一系列的操作后(可能会想propertySource中赋值等) 成为正在的propertySource
   就是添加几个默认的propertySource
   ag：在SpringApplication.run 方法中有
       prepareEnvironment(..)->getOrCreateEnvironment()->new StandardServletEnvironment()->customizePropertySources()
	   中初始化了两个StubPropertySource name分别为：servletConfigInitParams/servletContextInitParams的propertySource 
	   
(4)EnumerablePropertySource 可枚举的的propertySource  抽象类
   只重写了一个containsProperty方法 - 循环getPropertyNames()得到的String数组 得到property 名称
   主要是：增加了一个抽象方法public abstract String[] getPropertyNames() ：表示每个key都应该是可以枚举的   
   一个最重要分支 绝大部分配置源都继承于它。

(5)JndiPropertySource 和JNDI有关。
   JDNI ：Java 命名与目录接口（Java Naming and Directory Interface） 说白了就是把资源取个名字，再根据名字来找资源
   JNDI 是把 J2EE 应用程序合在一起的粘合剂，JNDI 提供的间接寻址允许跨企业交付可伸缩的、功能强大且很灵活的应用程序
   它的lookup方法就是依赖查找的精髓。
   web环境默认情况下的 StandardServletEnvironment 初始化的时候是会把JndiPropertySource放进环境里去的，name为：jndiPropertiesJndiTemplate是Spring提供的对JNDI的访问模版
(6)AnsiPropertySource 主要用在 ResourceBanner 定制启动的《spring》的颜色和格式。就是banner.txt文件中的${spring-boot.version}等的占位符替换和颜色格式的选择

(7)FilteredPropertySource springboot 的内容 （筛选特定操作的属性）
	主要作用在读取应用的配置文件ConfigFileApplicationListener类中
	ConfigFileApplicationListener介绍：是一个ApplicationListener 同时也是EnvironmentPostProcessor
	从onApplicationEvent()方法入手。可以看到这个类的大致作用为：(1)首先加载当前激活的Profile列表 (2)然后从默认的classpath:/,classpath:/config/,file:./,file:./config/这四个目录下查找默认的application-{profile}名字对应的配置文件
	而FilteredPropertySource的作用就是就是过滤出相关后缀的配置文件并加载到environment对应的PropertySources中(在propertySource中已有的name会进行替换掉)
	项目首次启动后，FilteredPropertySource处理之后可以看到propertySource列表中多了两个属性源：1：application 2：application-dev
	
(8)RandomValuePropertySource springboot的内容(用于生成随机数的propertySource)
   用法：
   // 自定义的一个随机值属性源,起名叫做 myRandom
        RandomValuePropertySource random = new RandomValuePropertySource("myRandom");
        // 随机生成一个整数
        log.info("random int:{}", random.getProperty("random.int"));
        // 随机生成一个整数，指定上边界，不大于等于1
        log.info("random int(1):{}", random.getProperty("random.int(1)"));
        // 随机生成一个整数，指定上边界，不大于等于5
        log.info("random int(5):{}", random.getProperty("random.int(5)"));
        // 随机生成一个整数，使用区间[0,1),前闭后开=>只能是1
        // 注意区间的表示法：使用()包围,2个字符
        log.info("random int(0,1):{}", random.getProperty("random.int(0,1)"));
        // 随机生成一个整数，使用区间[1,3),前闭后开=>只能是1或者2
        // 注意区间的表示法：使用空格包围,2个字符，前后各一个空格
        log.info("random int(1,3):{}", random.getProperty("random.int 1,3 "));
        // 随机生成一个整数，使用区间[3,4),前闭后开=>只能是3
        // 注意区间的表示法：使用汉字包围,2个字符，前后各一个汉字自负
        log.info("random int(3,4):{}", random.getProperty("random.int底3,4顶"));
        // 随机生成一个整数，使用区间[5,6),前闭后开=>只能是5
        // 注意区间的表示法：使用英文字母包围,2个字符，前后各一个英文字母
        log.info("random int(5,6):{}", random.getProperty("random.intL5,6U"));
        // 随机生成一个整数，使用区间[5,6),前闭后开=>只能是5
        // 注意区间的表示法：使用数字包围,2个字符，前一个数字5，后一个数字6
        log.info("random int(5,6):{}", random.getProperty("random.int55,66"));
        // 随机生成一个长整数
        log.info("random long:{}", random.getProperty("random.long"));
        // 随机生成一个整数，使用区间[100,101),前闭后开=>只能是100
        log.info("random long(100,101):{}", random.getProperty("random.long(100,101)"));
        // 随机生成一个 uuid
        log.info("random uuid:{}", random.getProperty("random.uuid"));

     也是在 ConfigFileApplicationListener中加载到environment的propertySource中的

(9)ConfigurationPropertySourcesPropertySource 
   在run的时候创建了一个configurationProperties 属性。目前没怎么看懂  但是能debug看到里面存放了所有的propertySource。
MutablePropertySources