一：@Inherited注解(java)  
    用在定义注解上的注解
    作用: 类继承关系中，子类会继承父类使用的注解中被@Inherited修饰的注解
          接口继承关系中，子接口不会继承父接口中的任何注解
          类实现接口时不会继承任何接口中定义的注解

二：@ComponentScan注解(Spring)
    包扫描。用于找到包中带有@Controller,@Service,@Repository,@Component的类 实例化
    属性：(1)excludeFilters 排除某些类，不加载
         (2)includeFilters 只加载指定的类 
         (3)useDefaultFilters 默认为true加载项(@Controller,@Service,@Repository,@Component)  可以指定为flase 不加载默认项
             @ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class)},
                            includeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class)})
             1)@Filter：扫描条件 
                FilterType.ANNOTATION：按注解的方式进行扫描 class为注解类型 继承AnnotationTypeFilter
                FilterType.ASSIGNABLE_TYPE:按指定的类过滤  class为类 继承AssignableTypeFilter
                FilterType.CUSTOM：按自己定义的方式来进行过滤和删选 继承TypeFilter。match方法的返回值为true时,为符合过滤条件,如果返回为false,则不符合过滤条件
                FilterType.ASPECTJ：按照ASPECTJ表达式
                FilterType.REGEX：按照正则表达

三：@ComponentScans(spring) 
    里面吗有多个ComponentScan

四：@Scope(spring)               
    控制是单例还是多例
    singleton:单例,容器启动时创建Bean对象,且容器中只有一个实例.
    prototype:多例,容器启动时不去创建Bean对象,每当获取的Bean的时候容器才去创建一个新的Bean对象.
    request:同一次请求创建一个实例
    session:同一个session创建一个实例

五：@Conditional
    @Conditional(TestCondition.class) 这句代码可以标注在类上面，表示该类下面的所有@Bean都会启用配置，也可以标注在方法上面，只是对该方法启用配置。
    加在类上面.代表当满足条件是该配置类下的所有bean才会加载。Spring框架还提供了很多@Condition给我们用
    @ConditionalOnBean（仅仅在当前上下文中存在某个对象时，才会实例化一个Bean）
    @ConditionalOnClass（某个class位于类路径上，才会实例化一个Bean）
    @ConditionalOnExpression（当表达式为true的时候，才会实例化一个Bean）
    @ConditionalOnMissingBean（仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean）该注解表示，如果存在它修饰的类的bean，则不需要再创建这个bean；可以给该注解传入参数例如@ConditionOnMissingBean(name = "example")，这个表示如果name为“example”的bean存在，这该注解修饰的代码块不执行。
    @ConditionalOnMissingClass（某个class类路径上不存在的时候，才会实例化一个Bean）
    @ConditionalOnNotWebApplication（不是web应用）
    @ConditionalOnWebApplication（是web应用）
    @ConditionalOnProperty(当有配置信息时生效)
                
六：@Import


七：ImportBeanDefinitionRegistrar 接口
    实现bean的动态注入
    registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)
    向bean注册表中动态注册beanDefinition 剩下的交给spring来搞定

八：AnnotationAttributes 类
    注解的解析，将注解的信息进行对象储存的转换
    在ImportBeanDefinitionRegistrar 所在的方法中registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)
    可以将spring容器中存在的beanDefinition上带的注解解析并获取对应注解类中的属性转换成AnnotationAttributes

    其中有一个工具类：AnnotationConfigUtils.attributesFor(AnnotationMetadata,class); 找到对应的class获取注解属性封装成AnnotationAttributes（参考AspectJAutoProxyRegistrar）


九：@Configration原理
ConfigurationClassPostProcessor
AnnotationConfigApplicationContext
AnnotationConfigServletWebServerApplicationContext
ConfigurationClassParser

ConfigurationClassPostProcessor#postProcessBeanFactory#enhanceConfigurationClasses 方法中遍历了所有的beanDefinition中
getAttribute 等于full的(这个是在ConfigurationClassPostProcessor#postProcessBeanDefinitionRegistry 中注册进去的，就是为了区分哪些类上标注了@Configuration)
 beanDefinition为AbstractBeanDefinition的所有的单例bean

 然后循环这些beanDefinition 向其中添加了Attribute(org.springframework.aop.framework.autoproxy.AutoProxyUtils.preserveTargetClass,true) 即使用Cglib动态代理的方式创建
 然后在beanDefinition中设置beanClass类型为动态代理的类class XXX $$EnhancerBySpringCGLIB$$697782d0
 需要注意的一点是：这里使用Cglib实例化bean，因为jdk动态代理是基于接口，这里就必须使用Cglib去代理

十：@Transactional失效场景
springboot 默认开启声明式事务  所以在springboot环境中@EnableTransactionManagement 可以不添加
 (1)@Transactional 应用在非 public 修饰的方法上
 (2)@Transactional 注解属性 propagation 设置错误
 (3)@Transactional  注解属性 rollbackFor 设置错误-Spring默认抛出了未检查unchecked异常（继承自 RuntimeException 的异常）或者 Error才回滚事务；其他异常不会触发回滚事务\
 (4)同一个类中方法调用，导致 @Transactional 失效  A 有 B没有  A 调用B ，外部调用了A  此时是不保证B中的事务的-只有当事务方法被 当前类以外的代码 调用时，才会由Spring生成的代理对象来管理
 (5)异常被你的 catch“吃了”导致 @Transactional 失效
 (6)数据库引擎不支持事务

十一：springboot bean的生命周期
        (1)初始化： 是一个赋值的过程，使用get，set方法为bean设置属性
                        BeanPostProcessor ： 作用在初始化前后
                                    ：postProcessBeforeInitialization()/postProcessAfterInitialization()
        (2)实例化： 一个创建bean的过程，即调用bean的构造函数创建单例bean，并将bean放入单例池中
                InstantiationAwareBeanPostProcessor ： 作用在实例化bean的前后
                            :postProcessBeforeInstantiation()/postProcessAfterInstantiation()/postProcessProperties()

        (3)执行顺序：先初始化：执行BeanPostProcessor
                                     -> postProcessBeforeInitialization() 初始化前置工作
                                       ->postProcessAfterInitialization() 初始化后置工作
                     后实例化：执行InstantiationAwareBeanPostProcessor
                                     -> postProcessBeforeInstantiation() 实例化前置工作
                                     -> postProcessAfterInstantiation()  实例化后置工作


